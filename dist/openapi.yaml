openapi: 3.0.0
info:
  version: 1.0.0
  title: 'serverApi'
  description: ''
  
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey

tags:
  - name: auth
    description: Authentication related routes
  - name: user
    description: Users personal information
  - name: recipes
    description: Reciepes general info

paths:
  /Register:
    post:
      tags:
        - auth
      description:  A json object that contain all user details.
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: netab12
                  pattern: '^[A-Za-z]+$'
                  minLength: 3
                  maxLength: 8
                firstname:
                  type: string
                  example: Neta
                lastname:
                  type: string
                  example: Barel  
                country:
                  type: string
                  example: Israel
                password:
                  type: string
                  example: a1b2C3
                  pattern: '^(?=.\d)(?=.?[#?!@$%^&*-]).{5,10}$'
                  minLength: 5
                  maxLength: 10
                passwordconfirmation:
                  type: string
                  example: a1b2C3
                  pattern: '^(?=.\d)(?=.?[#?!@$%^&*-]).{5,10}$'
                  minLength: 5
                  maxLength: 10
                email:
                  type: string
                  format: email
                  example: netaso@post.bgu.ac.il
                urlprofile:
                  type: string
                  
      responses:
        '200':
          description: >
            The register successfully.
          content:
            application/json:
              schema:
                type: object
                example: {'message' : 'user created' , 'success' : 'true' }
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 324rbgft5trfr32245
           
        '500':
          description: Registration failed
  
  /Login:
    post:
      tags:
        - auth
      description:  A json object - that contain user detail 
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string 
                  minLength: 3
                  maxLength: 8
                  description: Contain only letters
                password:
                  type: string
                  minLength: 5
                  maxLength: 10
                  description: Contains letters with at least 1 numerical character and 1 special characters
              example:
                  username: "neta"
                  password: "a1b2C3"
      responses:
        '200':
          description: > 
            User login success.
            The session ID is returned in a cookie named `session`. 
            You need to include this cookie in subsequent requests
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 324rbgft5trfr32245
        '401':
          description: Login failed
  
  
  
  /Logout:
    post:
      tags:
        - auth
      description: Log out and delete session
      responses:
         '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {'message' : 'Succesfully logs out' , 'success' : 'true' }
  
  /recipes/random:
    get:
      tags:
        - recipes
      description: get 3 random recipes 
      responses: 
        '200':
          description: Succese get 3 random recipes
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PreviewReciepe'
                example:
                  715567:
                    title: Havita
                    readyInMinutes: 6
                    aggregateLikes: 21
                    vegetarian: true
                    vegan: false
                    glutenFree: true
                    image: https://trbu.jpg
  /recipes/{recipeId}: 
    get:
      tags:
        - recipes
      description: Get information from DB to recipes.
      parameters:
      - in: path
        name: recipeId
        required: true
        schema: 
          type: integer
          example: 5
      responses:
        200:
          description: Success to get data from DB by id.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PreviewReciepe'
  
  /recipes/search:
    get:
      tags: 
        - recipes
      description: Serach for a reciepie in the spoonacular API, using a search query. Will return resuslts according to number param,Can filter resutld by Cusine, diet, intolerance.
      responses:
       '200':
          description: Success to get data from DB by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewReciepe'
  
        
  /user/favorites/{recipeId}:
    put:
      tags:
        - user
      description: The user`s favorite recipes    
      parameters:
      - in: path
        name: recipeId
        description: recipe id. 
        required: true
        schema:
          type: integer
          example: 2
          
      responses:
        '200':
          description: Recipe added to user favorites successfuly. 
          content:
            application/json:
              schema:
                type: string
                example: {'message' : 'The Recipe successfully saved as favorite' }
                
  /user/favorites:
    get:
      tags: 
       - user
      description: Get the user's app info on his favorites reciepes 

      responses:
        '200':
          description: All his favorite recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewReciepe'
      
                                
    
  /user/family:
    get:
      tags: 
       - user
      description: Get the user's app info on his family reciepes 
      responses:
        '200':
          description: All the family recipes 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/family_recipes'
    post:
      tags:
        - user
      description: add new recipe for family
      responses:
         '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {"Add recipe successfully" }
  
  /user/personal:
    get:
      tags: 
       - user
      description: Get the personal's app info on his personal reciepes 
      responses:
        '200':
          description: All the personal recipes 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewReciepe'
      
    post:
      tags:
        - user
      description: add new recipe for personal page
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: user id to use specific user
                  example: 234
                recipe_id:
                  type: string
                  description: recipe's id the user create
                  example: 54
                duration:
                  type: string
                  description: recipe's time to prepare the recipe in minutes
                  example: "30 to 45 minutes"
                likes:
                  type: string
                  description: recipe's likes
                  example: 4 
                vegan:
                  type: boolean
                  description: check if the recipe vegan
                  example: "1"
                vegetarian:
                  type: boolean
                  description: check if the recipe vegeterian
                  example: "0"
                glutenFree:
                  type: boolean
                  description: check the recipe glutenFree
                  example: "0"
                instructions:
                  type: string
                  description: recipe's instructions
                  example: "take agges and shake it"
                
                
      responses:
         '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: {"Add recipe successfully" }
                
  /user/watchedList:
    get:
      tags: 
       - user
      description: Get the 3 list the user watched
      responses:
        '200':
          description: All the 3 recipes the user watched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewReciepe'
                  
  /user/watched:
    get:
      tags: 
       - user
      description: Get the the user watched
      responses:
        '200':
          description: the last recipe the user watched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreviewReciepe'
        
  
  
      
components:
  schemas:
    PreviewReciepe:
      type: object
      properties:
        user_id:
          type: integer
          description: The id number each recipe. This is uniqu. 
          example: 1
        title:
          type: string
          description: The recipe title
          example: "Havita"
        image:
          type: string
          description: Image url of reciepe
        duration:
          type: integer
          description: Reciepe ready duration in minutes
          example: 10
        Likes:
          type: integer
          example: 34
        vegeterian:
          type: boolean
        vegan:
          type: boolean
        glutenFree:
          type: boolean
    family_recipes:
      type: object
      properties:
        recipe_id:
          type: string
          description: recipe i
          example: 3
        owner_recipe:
          type: string
          description: recipe owner
          example: neta
        when_eat:
          type: string
          description: wheneat to the recipe
          example: family dinner
        ingridients:
          type: string
          description: recipe's ingridients
          example: 3 eggs, half a cup of flour
        instructions:
          type: string
          description: how to make the recipe
          example: mix everything together and put in the oven for 30 minutes

    favorite_recipes:
      type: object
      properties:
        user_id:
          type: string
          description: id of the user who favorited the recipe
          example: ney
        recipe_id:
          type: string
          description: recipe identifier
          example: 43
    watched_recipes:
      type: object
      properties:
        user_id:
          type: string
          description: identifier of the user who watched the recipe
          example: neta
        recipe_id:
          type: string
          description: recipe identifier
          example: 43
    personal_recipes:
      type: object
      properties:
        user_id:
          type: integer
          description: The id number each recipe. This is uniqu. 
          example: 1
        title:
          type: string
          description: The recipe title
          example: "Havita"
        image:
          type: string
          description: Image url of reciepe
        duration:
          type: integer
          description: Reciepe ready duration in minutes
          example: 10
        Likes:
          type: integer
          example: 34
        vegeterian:
          type: boolean
        vegan:
          type: boolean
        glutenFree:
          type: boolean
      
    Cuisine:
      type: string
      enum:
        - African
        - American
        - British
        - Cajun
        - Caribbean
        - Chinese
        - Eastern European
        - European
        - French
        - German
        - Greek
        - Indian
        - Irish
        - Italian
        - Japanese
        - Jewish
        - Korean
        - Latin American
        - Mediterranean
        - Mexican
        - Middle Eastern
        - Nordic
        - Southern
        - Spanish
        - Thai
        - Vietnamese
    
    Diet:
      type: string
      enum:
        - Gluten Free
        - Ketogenic
        - Vegetarian
        - Lacto-Vegetarian
        - Ovo-Vegetarian
        - Vegan
        - Pescetarian
        - Paleo
        - Primal
        - Whole30
    
    Intolerance:
      type: string
      enum:
        - Dairy
        - Egg
        - Gluten
        - Grain
        - Peanut
        - Seafood
        - Sesame
        - Shellfish
        - Soy
        - Sulfite
        - Tree Nut
        - Wheat